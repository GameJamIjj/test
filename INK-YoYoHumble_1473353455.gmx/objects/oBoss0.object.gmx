<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBoss0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = surface_create(sprite_width * 2, sprite_height * 2);

// Clear surface
surface_set_target(surf);
draw_clear_alpha(0, 0);
surface_reset_target();

init = false;

c     = random(255);
color = make_color_hsv(c, 255, 255);

// Spring Vars
val    = 0.5;
vel    = 0;
target = 0;
zeta   = 0.15;
omega  = 8 * pi;
h      = 0.02;

// Movement
val2    = 0.5;
vel2    = 0;
target2 = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State

cx = 0;
cy = 0;
vx = 0;
vy = 0;

FALLING   = 10;
LANDED    = 11;
HOVER     = 12;
FALL_PREP = 13;

state     = FALLING;
stateInit = false;

hp         = 4;
canGetHurt = true;
toggle     = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; 32; i++)
    instance_create(x, y - 8, oPaintBullet);
    
//audio_play_sound(sfxDeath, 0, 0);

if (surface_exists(surf))
    surface_free(surf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == LANDED &amp;&amp; instance_exists(oPlayer)) {
    state     = HOVER;
    stateInit = false;
    
    val       = 1;
    y        -= 8 * 20;
    
    x         = oPlayer.x;
    val2      = oPlayer.x;
    target2   = oPlayer.x;
    
    alarm[1]  = random_range(50, 150);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state     = FALLING;
stateInit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state     = FALL_PREP;
stateInit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canGetHurt = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cx += vx;
cy += vy;
vxNew = round(cx);
vyNew = round(cy);
cx -= vxNew;
cy -= vyNew;

jumped = false;
landed = false;

repeat(abs(vyNew)) {
    if (!place_meeting(x, y + sign(vy), oParSolid))
        y += sign(vy);
    else {
        for (var i = 0; i &lt; 8; i++)
            instance_create(x, bbox_bottom, oPaint);  
        for (var i = 0; i &lt; 32; i++)
            instance_create(x, bbox_top, oPaintBullet);   
                      
        vy = 0;
        break;
    }
}

repeat(abs(vxNew)) {
    if (!place_meeting(x + sign(vx), y, oParSolid))
        x += sign(vx);
    else {
        vx = 0;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

var f, hh, oo, hoo, hhoo, detInv, detX, detV;

f      = 1.0 + (2.0 * h * zeta * omega);
hh     = h * h;
oo     = omega * omega;
hoo    = h * oo;
hhoo   = h * hoo;
detInv = 1.0 / (f + hhoo);
detX   = (f * val) + (h * vel) + (hhoo * target);
detV   = vel + (hoo * (target - val));
val    = detX * detInv;
vel    = detV * detInv;

detX   = (f * val2) + (h * vel2) + (hhoo * target2);
detV   = vel2 + (hoo * (target2 - val2));
val2   = detX * detInv;
vel2   = detV * detInv;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Change color
c += random_range(2, 8);

switch (state) {
    case FALLING:
        // Gravity
        vy  = Approach(vy, 24, 3.0);
        // Stretch
        val = 0.8;
        
        // Hit ground
        if (OnGround()) {
            audio_play_sound(sfxB0_GroundPound, 0, 0);
            
            state      = LANDED;
            stateInit = false;
        }
    break;
    
    case LANDED:
        if (!stateInit) {
            with (instance_create(x + 24, y, oGeyser))
                facing = 1;
            with (instance_create(x - 24, y, oGeyser))
                facing = -1;
                
            audio_play_sound(sfxB0_Spikes, 0, 0);
                
            with (oGame) {
                shake    = true;
                alarm[0] = 8;
            }
            
            // If player doesn't hop in time.
            alarm[3] = 60;
            
            instance_create(x, y, oShockwave);
                       
            stateInit = true;
        }    
    break;
    
    case HOVER:
        if (instance_exists(oPlayer)) {
            target2 = clamp(oPlayer.x, 120, 520);
            x       = val2;
        }
    break;
    
    case FALL_PREP:
        if (!stateInit) {
            stateInit = true;
            alarm[2]  = 5;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != FALLING &amp;&amp; (other.y &lt; y) &amp;&amp; (other.bbox_right &gt; bbox_left || other.bbox_left &lt; bbox_right) &amp;&amp; !other.onGround) {
    // Bounce player
    other.vy = -other.jumpHeight;
    
    with (oGame) {
        shake    = true;
        alarm[0] = 8;
    }
    
    if (canGetHurt) {
        hp--;
        canGetHurt = false;
        alarm[0]   = 30;
        
        audio_play_sound(sfxBossKill, 0, 0);
        
        // Hurt effect
        {
            val = -0.8;
    
            for (var i = 0; i &lt; 8; i++)
                instance_create(x, bbox_bottom, oPaint);  
            for (var i = 0; i &lt; 32; i++)
                instance_create(x, bbox_top, oPaintBullet); 
        }    
    }
    
    if (hp &lt;= 0) {
        instance_create(oPlayer.x, oPlayer.y - 16, oUpgradeTouchPaint);
        instance_destroy();
    }
    
    state     = HOVER;
    stateInit = false;
    
    val       = 1;
    y        -= 8 * 20;
    
    x         = other.x;
    val2      = other.x;
    target2   = other.x;
    
    alarm[1]  = random_range(50, 150);
    
    // Cancel other alarm
    alarm[3]  = -1;
    
} else {
    with (other)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>toggle = !toggle;

if (!init) {
    surface_set_target(surf);
    draw_clear_alpha(0, 0);
    surface_reset_target();
        
    init = true;
}

if (toggle || canGetHurt) {
    if (surface_exists(surf)) {
        surface_set_target(surf);
        draw_clear_alpha(0, 0);
        
        if (state == FALL_PREP)
            draw_sprite_ext(sprite_index, image_index, 32 + random_range(-1, 1), 48 + random_range(-1, 1), image_xscale - (val), image_yscale + (val), 0, c_white, 1 - (!canGetHurt * 0.33));
        else
            draw_sprite_ext(sprite_index, image_index, 32, 48, image_xscale - (val), image_yscale + (val), 0, c_white, 1 - (!canGetHurt * 0.33));
        
        draw_set_blend_mode_ext(7, 6);
    
        var c1, c2, c3, c4;
        
        c1 = color;
        
        if (c + (255 * 0.25) &gt; 255)
            c2 = make_color_hsv(c + (255 * 0.25) - 255, 255, 255);
        else
            c2 = make_color_hsv(c + (255 * 0.25), 255, 255);
        
        if (c + (255 * 0.5) &gt; 255)
            c3 = make_color_hsv(c + (255 * 0.5) - 255, 255, 255);
        else
            c3 = make_color_hsv(c + (255 * 0.5), 255, 255);
            
        if (c + (255 * 0.75) &gt; 255)
            c4 = make_color_hsv(c + (255 * 0.75) - 255, 255, 255);
        else
            c4 = make_color_hsv(c + (255 * 0.75), 255, 255);
          
        draw_set_alpha(1 - (!canGetHurt * 0.33));      
        draw_rectangle_colour(0, 0, 64, 48, c1, c4, c3, c2, false);
        
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
                
        draw_surface(surf, x - 32, y - 48);
            
    } else {
        surf = surface_create(sprite_width * 2, sprite_height * 2);
        
        surface_set_target(surf);
        draw_clear_alpha(0, 0);
        draw_sprite_ext(sprite_index, image_index, 32, 48, image_xscale - (val), image_yscale + (val), 0, c_white, 1 - (!canGetHurt * 0.33));
        
        draw_set_blend_mode_ext(7, 6);
    
        var c1, c2, c3, c4;
        
        c1 = color;
        
        if (c + (255 * 0.25) &gt; 255)
            c2 = make_color_hsv(c + (255 * 0.25) - 255, 255, 255);
        else
            c2 = make_color_hsv(c + (255 * 0.25), 255, 255);
        
        if (c + (255 * 0.5) &gt; 255)
            c3 = make_color_hsv(c + (255 * 0.5) - 255, 255, 255);
        else
            c3 = make_color_hsv(c + (255 * 0.5), 255, 255);
            
        if (c + (255 * 0.75) &gt; 255)
            c4 = make_color_hsv(c + (255 * 0.75) - 255, 255, 255);
        else
            c4 = make_color_hsv(c + (255 * 0.75), 255, 255);
         
        draw_set_alpha(1 - (!canGetHurt * 0.33));   
        draw_rectangle_colour(0, 0, 64, 48, c1, c4, c3, c2, false);
        
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
                
        draw_surface(surf, x - 32, y - 48);
    }
}

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
