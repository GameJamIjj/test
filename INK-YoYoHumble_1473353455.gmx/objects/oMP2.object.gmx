<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMP2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParText</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Player Color
hue        = irandom_range(0, 36);

if (instance_exists(oMP1)) {
    if (hue == oMP1.hue)
        hue++;
        
    if (hue &gt; 36)
        hue = 1;
}

saturation = 255;
value      = 255;

cursor = hue;

// Spring Vars
val    = hue;
vel    = 0;
target = hue;
zeta   = 0.15;
omega  = 6 * pi;
h      = 0.02;

leftPrev  = false;
rightPrev = false;
leftHeld  = false;
rightHeld = false;

selected = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Surf

surf = surface_create(sprite_width, sprite_height);

// Clear surface
surface_set_target(surf);
draw_clear_alpha(0, 0);

// Draw sprite
draw_sprite(sprite_index, -1, 0, 0);
surface_reset_target();

init = false;

// Initial splat
for (var i = 0; i &lt; 64; i++)
    with (instance_create(x + 64 + random_range(-20, 20), y + 64 + random_range(-20, 20), oMultiMenuPaint))
        image_blend = make_colour_hsv(other.hue * (255 / 36), 255, 255);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Extra spring stuff

val2    = 0;
vel2    = 0;
target2 = 32; // Radius of color wheel
zeta2   = 0.15;
omega2  = 6 * pi;
h2      = 0.02;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var f, hh, oo, hoo, hhoo, detInv, detX, detV;

target = target mod 36;
val    = val    mod 36;

// Wrap
if (val - target &gt; 18)
    target += 36;
else if (val - target &lt; -18)
    target -= 36;

f      = 1.0 + (2.0 * h * zeta * omega);
hh     = h * h;
oo     = omega * omega;
hoo    = h * oo;
hhoo   = h * hoo;
detInv = 1.0 / (f + hhoo);
detX   = (f * val) + (h * vel) + (hhoo * target);
detV   = vel + (hoo * (target - val));
val    = detX * detInv;
vel    = detV * detInv;

//val    = target;
hue    = val;
cursor = hue;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Intro

var f, hh, oo, hoo, hhoo, detInv, detX, detV;

f      = 1.0 + (2.0 * h2 * zeta2 * omega2);
hh     = h2 * h2;
oo     = omega2 * omega2;
hoo    = h2 * oo;
hhoo   = h2 * hoo;
detInv = 1.0 / (f + hhoo);
detX   = (f * val2) + (h2 * vel2) + (hhoo * target2);
detV   = vel2 + (hoo * (target2 - val2));
val2    = detX * detInv;
vel2    = detV * detInv;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (oGame.slot[1]) {
    case 0:
        var kLeft   = gamepad_axis_value(0, gp_axislh) &lt; -0.70;
        var kRight  = gamepad_axis_value(0, gp_axislh) &gt;  0.70;
        var kSelect = gamepad_button_check_pressed(0, gp_face1) || gamepad_button_check_pressed(0, gp_start);
    break;
    
    case 4:
        var kLeft   = keyboard_check(vk_left);
        var kRight  = keyboard_check(vk_right);
        var kSelect = keyboard_check_pressed(ord('A'));
    break;
}

if (!selected) {
    if (kLeft &amp;&amp; !leftPrev &amp;&amp; !kRight) {
        target++;
        
        for (var i = 0; i &lt; 32; i++)
            with (instance_create(x + 64 + random_range(-16, 16), y + 64 + random_range(-16, 16), oMultiMenuPaint))
                image_blend = make_colour_hsv(other.target * (255 / 36), 255, 255);
    } else if (kRight &amp;&amp; !rightPrev &amp;&amp; !kLeft) {
        target--;
        
        for (var i = 0; i &lt; 32; i++)
            with (instance_create(x + 64 + random_range(-16, 16), y + 64 + random_range(-16, 16), oMultiMenuPaint))
                image_blend = make_colour_hsv(other.target * (255 / 36), 255, 255);
    }
        
    // Key prev
    if (kLeft) {
        leftPrev = true;
        
        leftHeld += 1;
        rightHeld = 0;
        
        if (leftHeld &gt; 2) {
            target += 2;
    
            for (var i = 0; i &lt; 32; i++)
                with (instance_create(x + 64 + random_range(-16, 16), y + 64 + random_range(-16, 16), oMultiMenuPaint))
                    image_blend = make_colour_hsv(other.target * (255 / 36), 255, 255);
                
            leftHeld = 0;
        }
    } else {
        leftPrev = false;
        leftHeld = 0;
    }
    
    if (kRight) {
        rightPrev = true;
        
        rightHeld += 1;
        leftHeld = 0;
        
        if (rightHeld &gt; 2) {
            target -= 2;
                
            for (var i = 0; i &lt; 32; i++)
                with (instance_create(x + 64 + random_range(-16, 16), y + 64 + random_range(-16, 16), oMultiMenuPaint))
                    image_blend = make_colour_hsv(other.target * (255 / 36), 255, 255);
    
            rightHeld = 0;
        }
    } else {
        rightPrev = false;
        rightHeld = 0;
    }
} 

if (kSelect) {
    selected = true;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var j = 0;

for (var i = 0; i &lt;= 360; i += 10) {
    if (selected &amp;&amp; target &gt; 0 &amp;&amp; target &lt; 360 &amp;&amp; round(i / 10) == round(target)) {
        DrawCirclePart(x, y, val2 * 1.5, i - 15 + (32 - val2) * 4, i + 15 + (32 - val2) * 4, make_colour_hsv(j, 255, 255), make_colour_hsv(j, 255, 255), 1, 1);
    } else if (selected &amp;&amp; target &lt; 0 &amp;&amp; target &gt; -360 &amp;&amp; (round((360 - i)/ 10) == round(abs(target)))) {
        DrawCirclePart(x, y, val2 * 1.5, i - 15 + (32 - val2) * 4, i + 15 + (32 - val2) * 4, make_colour_hsv(j, 255, 255), make_colour_hsv(j, 255, 255), 1, 1);    
    } else if (selected &amp;&amp; (abs(target) == 0 || abs(target) == 360) &amp;&amp; (i / 10 == 0 || i / 10 == 360)) {
        DrawCirclePart(x, y, val2 * 1.5, i - 15 + (32 - val2) * 4, i + 15 + (32 - val2) * 4, make_colour_hsv(j, 255, 255), make_colour_hsv(j, 255, 255), 1, 1);
    } else
        DrawCirclePart(x, y, val2, i + (32 - val2) * 4, i + 10 + (32 - val2) * 4, make_colour_hsv(j, 255, 255), make_colour_hsv(j, 255, 255), 1, 1);
    j += (255 / 36);
}

if (!selected)
    draw_sprite_ext(sMPCursor, -1, x + lengthdir_x(8 + val2, cursor * 10 + 5), y + lengthdir_y(8 + val2, cursor * 10 + 5), 1, 1, point_direction(x + lengthdir_x(40, cursor * 10 + 5), y + lengthdir_y(40, cursor * 10 + 5), x, y), make_color_hsv(hue * (255 / 36), saturation, value), 1);

if (!init) {
    surface_set_target(surf);
    draw_clear_alpha(0, 0);
    draw_sprite(sprite_index, -1, 0, 0);  
    surface_reset_target();
    
    init = true;
}

if (surface_exists(surf)) {
    draw_surface(surf, x - 56, y + 56);
} else {
    surf = surface_create(20, 10);
    
    surface_set_target(surf);
    draw_clear_alpha(0, 0);
    draw_sprite(sprite_index, -1, 0, 0);    
    surface_reset_target();
    
    draw_surface(surf, x - 56, y + 56);
}

// Draw box + ready
if (selected) {
    draw_set_color(make_color_rgb(20, 0, 48));
    draw_set_alpha(0.75);
    
    draw_rectangle(x - 64, y - 64, x + 64, y + 176, false);
    
    draw_set_color(c_white);
    draw_set_alpha(1.0);
    
    draw_sprite(sReady, -1, 80 + 160, 210);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
