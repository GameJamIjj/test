<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBoss2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = surface_create(640, 360);

// Clear surface
surface_set_target(surf);
draw_clear_alpha(0, 0);
surface_reset_target();

init = false;

c     = random(255);
color = make_color_hsv(c, 255, 255);

// Spring Vars
val    = 0;
vel    = 0;
target = 0;
zeta   = 0.15;
omega  = 8 * pi;
h      = 0.02;

val2    = 2;
vel2    = 0;
target2 = 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State

cx = 0;
cy = 0;
vx = 0;
vy = 0;

INIT    = 10;
DASHING = 11;
HURT    = 12;
IDLE    = 13;

state     = INIT;
stateInit = false;

hp         = 4;
canGetHurt = true;
toggle     = true;

dashSpd    = 16.0;

shake = false;

dir       = 0;
dirTarget = 0;
width     = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; 32; i++)
    instance_create(x, y - 8, oPaintBullet);
    
//audio_play_sound(sfxDeath, 0, 0);

if (surface_exists(surf))
    surface_free(surf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stateInit = false;
state = DASHING;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delay

delay  = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target2 = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vx = 0;
vy = 0;

audio_play_sound(sfxB2_Laser, 0, 0);

shake    = true;
alarm[1] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shake = false;

for (var i = 0; i &lt; 16; i++)
    instance_create(x, y - 12, oPaintBullet);

if (instance_exists(oPlayer)) {
    vx = lengthdir_x(dashSpd, dir - 180)//point_direction(x, y - 12, oPlayer.x, oPlayer.y - 8));
    vy = lengthdir_y(dashSpd, dir - 180)//point_direction(x, y - 12, oPlayer.x, oPlayer.y - 8));

    // width
    target2 = 8;
    
    alarm[2] = random_range(100, 200);
    alarm[3] = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canGetHurt = true;

with (instance_create(x, y, oMissile)) {
    direction = 0;
}

with (instance_create(x, y, oMissile)) {
    direction = 90;
}

with (instance_create(x, y, oMissile)) {
    direction = 180;
}

with (instance_create(x, y, oMissile)) {
    direction = 270;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cx += vx;
cy += vy;
vxNew = round(cx);
vyNew = round(cy);
cx -= vxNew;
cy -= vyNew;

jumped = false;
landed = false;

repeat(abs(vyNew)) {
    if (!place_meeting(x, y + sign(vy), oParSolid))
        y += sign(vy);
    else {
        with (oGame) {
            shake = true;
            alarm[0] = 4;
        }
        
        audio_play_sound(sfxB2_Bounce, 0, 0);
        
        with (oFxGrid)
            FxGridExplode(grid, other.x, other.y, 50, 50);
            
        for (var i = 0; i &lt; 16; i++)
            instance_create(x, y - 12, oPaintBullet);
        
        if (sign(vy) == 1)
            for (var i = 0; i &lt; 8; i++)
                instance_create(x + random_range(-8, 8), bbox_bottom, oPaint);   
        else if (sign(vy) == -1)
            for (var i = 0; i &lt; 8; i++)
                instance_create(x + random_range(-8, 8), bbox_top, oPaint);   
        
        val = -0.5;
                                              
        vy *= -0.66;
        break;
    }
}

repeat(abs(vxNew)) {
    if (!place_meeting(x + sign(vx), y, oParSolid))
        x += sign(vx);
    else {        
        with (oGame) {
            shake = true;
            alarm[0] = 4;
        }
        
        audio_play_sound(sfxB2_Bounce, 0, 0);
        
        with (oFxGrid)
            FxGridExplode(grid, other.x, other.y, 50, 50);
        
        for (var i = 0; i &lt; 16; i++)
            instance_create(x, y - 24, oPaintBullet);
        
        if (sign(vx) == 1)
            for (var i = 0; i &lt; 8; i++)
                instance_create(bbox_right, y + random_range(-4, 4), oPaint);   
        else if (sign(vx) == -1)
            for (var i = 0; i &lt; 8; i++)
                instance_create(bbox_left, y + random_range(-4, 4), oPaint);  
        
        val = 0.5;
                                              
        vx *= -0.66;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation
    
var f, hh, oo, hoo, hhoo, detInv, detX, detV;

f      = 1.0 + (2.0 * h * zeta * omega);
hh     = h * h;
oo     = omega * omega;
hoo    = h * oo;
hhoo   = h * hoo;
detInv = 1.0 / (f + hhoo);
detX   = (f * val) + (h * vel) + (hhoo * target);
detV   = vel + (hoo * (target - val));
val    = detX * detInv;
vel    = detV * detInv;

detX   = (f * val2) + (h * vel2) + (hhoo * target2);
detV   = vel2 + (hoo * (target2 - val2));
val2   = detX * detInv;
vel2   = detV * detInv;

width  = val2;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Laser kills player
if (width &gt;= 4) {
    if (collision_line(x + lengthdir_x(6, dir - 90), y + lengthdir_y(6, dir - 90), x + lengthdir_x(6, dir - 90) + lengthdir_x(640, dir), y + lengthdir_y(6, dir - 90) + lengthdir_y(640, dir), oPlayer, false, false))
        with (oPlayer)
            instance_destroy();      
    if (collision_line(x + lengthdir_x(6, dir + 90), y + lengthdir_y(6, dir + 90), x + lengthdir_x(6, dir + 90) + lengthdir_x(640, dir), y + lengthdir_y(6, dir + 90) + lengthdir_y(640, dir), oPlayer, false, false))
        with (oPlayer)
            instance_destroy();   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Change color
c += random_range(2, 8);

switch (state) {
    case INIT:
        if (!stateInit) {
            // Dash at player
            audio_play_sound(sfxB2_Laser, 0, 0);
            
            shake     = true;
            alarm[1]  = 30;
            
            dirTarget = 0;
            dir = dirTarget;
            direction = dir;
            
            stateInit = true;
        }
        
    break;
}

// Friction
vx = Approach(vx, 0, 0.01);
vy = Approach(vy, 0, 0.01);

//if (target2 == 2) {
    // Set player angle
    if (instance_exists(oPlayer))
        dirTarget = point_direction(x, y - 24, oPlayer.x, oPlayer.y - 8);
       
    // Shift towards angle 
    TurnTowards(dirTarget, abs(angle_difference(direction,dirTarget)) / 20);
    
    // Oops
    dir = direction;
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((other.y &lt; y) &amp;&amp; (other.bbox_right &gt; bbox_left || other.bbox_left &lt; bbox_right) &amp;&amp; !other.onGround) {
    // Bounce player
    other.vy = -other.jumpHeight;
    
    with (oGame) {
        shake    = true;
        alarm[0] = 8;
    }
    
    if (canGetHurt) {
        hp--;
        canGetHurt = false;
        alarm[0]   = 30;
        alarm[5]   = 30;
        
        audio_play_sound(sfxBossKill, 0, 0);
        
        // Hurt effect
        {
            val = -0.8;
    
            for (var i = 0; i &lt; 8; i++)
                instance_create(x, bbox_bottom, oPaint);  
            for (var i = 0; i &lt; 32; i++)
                instance_create(x, bbox_top, oPaintBullet); 
        }    
    }
    
    if (hp &lt;= 0) {
        instance_create(oPlayer.x, oPlayer.y - 16, oUpgradeTouchPaint);
        
        with (oDebris)
            instance_destroy();
            
        instance_destroy();
    }
    
    //state     = HOVER;
    //stateInit = false;
    
    xscale = 1.5;
    yscale = 0.5;
    
    vx = 0;
    vy = 0;
    
    target2 = 2;
    width   = 2;
    
    // Shoot after canGetHurt timer
    alarm[2] = 30;
    
    //alarm[1]  = random_range(50, 150);
    
    // Cancel other alarm
    //alarm[3]  = -1;
    
} else {
    with (other)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>toggle = !toggle;

if (!init) {
    surface_set_target(surf);
    draw_clear_alpha(0, 0);
    surface_reset_target();
        
    init = true;
}

if (toggle || canGetHurt) {
    if (surface_exists(surf)) {
        surface_set_target(surf);
        draw_clear_alpha(0, 0);
        
        draw_sprite_pos(sPlayer, image_index, x + lengthdir_x(width, dir - 90), y + lengthdir_y(width, dir - 90), x + lengthdir_x(width, dir + 90), y + lengthdir_y(width, dir + 90), x + lengthdir_x(640, dir) + lengthdir_x(width, dir + 90), y + lengthdir_y(640, dir) + lengthdir_y(width, dir + 90), x + lengthdir_x(640, dir) + lengthdir_x(width, dir - 90), y + lengthdir_y(640, dir) + lengthdir_y(width, dir - 90), 1);
        draw_sprite_ext(sprite_index, image_index, x + random_range(-4, 4) * shake, y + random_range(-4, 4) * shake, image_xscale - (val), image_yscale + (val), 0, c_white, 1);
        
        draw_set_blend_mode_ext(7, 6);
    
        var c1, c2, c3, c4;
        
        c1 = color;
        
        if (c + (255 * 0.25) &gt; 255)
            c2 = make_color_hsv(c + (255 * 0.25) - 255, 255, 255);
        else
            c2 = make_color_hsv(c + (255 * 0.25), 255, 255);
        
        if (c + (255 * 0.5) &gt; 255)
            c3 = make_color_hsv(c + (255 * 0.5) - 255, 255, 255);
        else
            c3 = make_color_hsv(c + (255 * 0.5), 255, 255);
            
        if (c + (255 * 0.75) &gt; 255)
            c4 = make_color_hsv(c + (255 * 0.75) - 255, 255, 255);
        else
            c4 = make_color_hsv(c + (255 * 0.75), 255, 255);
          
        draw_set_alpha(1 - (!canGetHurt * 0.33));      
        draw_rectangle_colour(0, 0, 640, 360, c1, c4, c3, c2, false);
        
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
               
        draw_surface(surf, 0, 0);
            
    } else {
        surf = surface_create(640, 360);
        
        surface_set_target(surf);
        draw_clear_alpha(0, 0);
        
        draw_sprite_pos(sPlayer, image_index, x + lengthdir_x(width, dir - 90), y + lengthdir_y(width, dir - 90), x + lengthdir_x(width, dir + 90), y + lengthdir_y(width, dir + 90), x + lengthdir_x(640, dir) + lengthdir_x(width, dir + 90), y + lengthdir_y(640, dir) + lengthdir_y(width, dir + 90), x + lengthdir_x(640, dir) + lengthdir_x(width, dir - 90), y + lengthdir_y(640, dir) + lengthdir_y(width, dir - 90), 1);
        draw_sprite_ext(sprite_index, image_index, x + random_range(-4, 4) * shake, y + random_range(-4, 4) * shake, image_xscale - (val), image_yscale + (val), 0, c_white, 1);
        
        draw_set_blend_mode_ext(7, 6);
    
        var c1, c2, c3, c4;
        
        c1 = color;
        
        if (c + (255 * 0.25) &gt; 255)
            c2 = make_color_hsv(c + (255 * 0.25) - 255, 255, 255);
        else
            c2 = make_color_hsv(c + (255 * 0.25), 255, 255);
        
        if (c + (255 * 0.5) &gt; 255)
            c3 = make_color_hsv(c + (255 * 0.5) - 255, 255, 255);
        else
            c3 = make_color_hsv(c + (255 * 0.5), 255, 255);
            
        if (c + (255 * 0.75) &gt; 255)
            c4 = make_color_hsv(c + (255 * 0.75) - 255, 255, 255);
        else
            c4 = make_color_hsv(c + (255 * 0.75), 255, 255);
          
        draw_set_alpha(1 - (!canGetHurt * 0.33));      
        draw_rectangle_colour(0, 0, 640, 360, c1, c4, c3, c2, false);
        
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
        
        draw_set_alpha(1 - (!canGetHurt * 0.33));        
        draw_surface(surf, 0, 0);
    }
}

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
