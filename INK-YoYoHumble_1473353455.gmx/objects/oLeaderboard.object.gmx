<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization

// Font Stuff
global.LeaderboardFont = font_add_sprite_ext(sLeaderboardFont, "1234567890.:ABCDEFGHIJKLMNOPQRSTUVWXYZ+-/", true, 2);
draw_set_font(global.LeaderboardFont);
draw_set_colour(c_white);

// Leaderboards
IsTimerStoppedLevel = false;
IsTimerStoppedWorld = false;
IsTimerStoppedGame = false;

TimerStoppedFlagLevel = false;
TimerStoppedFlagWorld = false;
TimerStoppedFlagGame = false;

StartingTimeLevel = 0;
StartingTimeWorld = 0;
StartingTimeGame = 0;

PauseOffsetTimeLevel = 0;
PauseOffsetTimeWorld = 0;
PauseOffsetTimeGame = 0;

IsLeaderboardActiveWorld = false;
IsLeaderboardActiveGame = false;

IsSpeedrunModeOn = false;

WRTime = 0;
PBTime = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

font_delete(global.LeaderboardFont);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Leaderboard Calculations

var kToggleTimer = keyboard_check_pressed(ord('T')) || gamepad_button_check_pressed(0, gp_face4);

if (room = rmLevelSelect &amp;&amp; kToggleTimer)
    IsSpeedrunModeOn = !IsSpeedrunModeOn;

// Don't update timers when paused or if speedrun mode is off
if (!IsSpeedrunModeOn || instance_exists(oPause))
    exit;
    
if (room != rmSplash &amp;&amp; room != rmTitle &amp;&amp; room != rmLevelSelect &amp;&amp; room != rmCredits)
{
    var currTimer = get_timer();

    // Level Time
    if (!IsTimerStoppedLevel)
    {
        timeInLevel = (currTimer - PauseOffsetTimeLevel - StartingTimeLevel) / 1000;
        timeMsLevel  = floor(timeInLevel % 1000);
        if (!instance_exists(oPlayer))
            timeMsLevel = 0;
        timeSecLevel = floor((timeInLevel / 1000) % 60);
        timeMinLevel = floor(timeInLevel / 60000);
        
        if (TimerStoppedFlagLevel)
        {
            IsTimerStoppedLevel = true;
        }
    }
    
    // World Time
    if (!IsTimerStoppedWorld &amp;&amp; IsLeaderboardActiveWorld)
    {
        timeInWorld = (currTimer - PauseOffsetTimeWorld - StartingTimeWorld) / 1000;
        timeMsWorld =  floor(timeInWorld % 1000);
        timeSecWorld = floor((timeInWorld / 1000) % 60);
        timeMinWorld = floor(timeInWorld / 60000);
        
        if (TimerStoppedFlagWorld)
        {
            IsTimerStoppedWorld = true;   
        }
    }
    
    // Game Time
    if (!IsTimerStoppedGame &amp;&amp; IsLeaderboardActiveGame)
    {
        timeInGame = (currTimer - PauseOffsetTimeGame - StartingTimeGame) / 1000;
        timeMsGame  = floor(timeInGame % 1000);
        timeSecGame = floor((timeInGame / 1000) % 60);
        timeMinGame = floor(timeInGame / 60000);
        
        if (TimerStoppedFlagGame)
        {
            IsTimerStoppedGame = true;   
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Room Leaderboard

// Reset leaderboards
if (room == rmLevelSelect)
{
    IsTimerStoppedLevel = false;
    IsTimerStoppedWorld = false;
    IsTimerStoppedGame = false;
    
    TimerStoppedFlagLevel = false;
    TimerStoppedFlagWorld = false;
    TimerStoppedFlagGame = false;
    
    StartingTimeLevel = 0;
    StartingTimeWorld = 0;
    StartingTimeGame = 0;
    
    PauseOffsetTimeLevel = 0;
    PauseOffsetTimeWorld = 0;
    PauseOffsetTimeGame = 0;
    
    IsLeaderboardActiveWorld = false;
    IsLeaderboardActiveGame = false;
}

// Level Time
if (room != rmSplash &amp;&amp; room != rmTitle &amp;&amp; room != rmLevelSelect &amp;&amp; room != rmCredits)
{
    var levelTime = get_timer();
    StartingTimeLevel = levelTime;
    IsTimerStoppedLevel = false;
    TimerStoppedFlagLevel = false;
    PauseOffsetTimeLevel = 0;
    
    // String formatting
    levelNum = room - oGame.rmOffset + 1;
}

// World Time
if (room == rmDarkWorld || room == rmHello || room == room34)
{
    var worldTime = get_timer();
    StartingTimeWorld = worldTime;
    IsTimerStoppedWorld = false;
    TimerStoppedFlagWorld = false;
    PauseOffsetTimeWorld = 0;
    IsLeaderboardActiveWorld = true;
    
    worldNum = 2;
    if (levelNum &lt; 25)
        worldNum = 1;
    else if (levelNum &gt; 50)
        worldNum = 3;
}

// Game Time
if (room == rmHello)
{
    var gameTime = get_timer();
    StartingTimeGame = gameTime;
    IsTimerStoppedGame = false;
    TimerStoppedFlagGame = false;
    PauseOffsetTimeGame = 0;
    IsLeaderboardActiveGame = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Leaderboard timer

// Don't draw timers when paused or if speedrun mode is off
if (!IsSpeedrunModeOn || instance_exists(oPause))
    exit;
    
// Checks for a playable level
if (room != rmSplash &amp;&amp; room != rmTitle &amp;&amp; room != rmLevelSelect)
{
    // Set to white by default
    var color = c_white;
    draw_set_colour(color);
    draw_set_alpha(1.0);
    
    //draw_text(8, 24, timeInLevel);
    //draw_text(8, 40, WRTime);
    
    // Draw the level timer red if the player dies
    if (!instance_exists(oPlayer) &amp;&amp; !instance_exists(oUpgradeTouchPaint) &amp;&amp; room != rmCredits)
        color = c_red;
    
    if (IsTimerStoppedLevel)
    {
        if (room != rmCredits)
        {
            draw_set_colour(c_white);
            draw_text(200, 344, "HOLD R/Y TO RESTART LEVEL");
        }
    
        var diff = timeInLevel - WRTime;
        var diffMs = floor(diff % 1000);
        var diffSec = floor((diff / 1000) % 60);
        
        if (diff &lt;= 0 || WRTime == 0)
        {
            draw_set_colour(c_lime);
            timeSign = "-";
        }
        else
        {
            draw_set_colour(c_red);
            timeSign = "+";
        }
        
        /*draw_text(250, 24, timeSign
                           + ZeroesSec(diffSec)
                           + string(abs(diffSec))
                           + "."
                           + ZeroesMs(diffMs)
                           + string(abs(diffMs)));*/
        
        color = c_yellow;
    }
    LbDrawText(250, 16, "LEVEL", levelNum, timeMinLevel, timeSecLevel, timeMsLevel, color, c_black);
    
    // World Timer, if active
    color = c_white;
    if (IsTimerStoppedWorld)
        color = c_yellow;
    if (IsLeaderboardActiveWorld)
        LbDrawText(8, 16, "WORLD", worldNum, timeMinWorld, timeSecWorld, timeMsWorld, color, c_black);
    
    // Overall timer, if active
    color = c_white;    
    if (IsTimerStoppedGame)
        color = c_yellow;
    if (IsLeaderboardActiveGame)
        LbDrawText(470, 16, "OVERALL", -1, timeMinGame, timeSecGame, timeMsGame, color, c_black);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Text in Level Select

if (room == rmLevelSelect)
{
    var modeText = "OFF";
    draw_set_color(c_white);
    
    if (IsSpeedrunModeOn)
        modeText = "ON";
        
    draw_text(382, 336, modeText);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
