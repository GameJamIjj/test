<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDoor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spring Vars

val    = 0;
vel    = 0;
target = 0;
zeta   = 0.15;
omega  = 8 * pi;
h      = 0.02;

c = random(255);
color = make_color_hsv(c, 255, 255);

locked = false;
init   = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!locked) {
    if (place_meeting(x, y, oPlayer)) {
        if (!oPlayer.freeze) {
            
            // Stop sfxSlide
            if (audio_is_playing(sfxSlide))
                audio_sound_gain(sfxSlide, 0, 15);
                
            instance_create(0, 0, oFxRoomGoTo);
            val = 0.66;
            
            oPlayer.freeze  = true;
            audio_play_sound(sfxDoor, 0, 0);
            
            if (oLeaderboard.IsSpeedrunModeOn)
            {
                // Leaderboards triggers
                oLeaderboard.TimerStoppedFlagLevel = true;
                
                if ((room == rmBoss0 || room == rmBoss1 || room == rmBoss2Edit) &amp;&amp; oLeaderboard.IsLeaderboardActiveWorld)
                    oLeaderboard.TimerStoppedFlagWorld = true;
                    
                if (room == rmBoss2Edit &amp;&amp; oLeaderboard.IsLeaderboardActiveGame)
                    oLeaderboard.TimerStoppedFlagGame = true;
            }
            
            if (room != rmBoss2Edit) {
                // Unlock next level
                oGame.level[room - oGame.rmOffset + 1] = true;
                
                // Save game
                ini_open("DontModifyThis.ini");
                
                // If coin collected during this run
                if (global.IsCoinCollected) {
                    // Save coin
                    ini_write_real("NormalLevels", string(room - oGame.rmOffset), 2);
                // Else if coin hasn't been collected and wasn't collected previously
                } else if (ini_read_real("NormalLevels", string(room - oGame.rmOffset), false) == 0)
                    // 'Beat' level w/o coin
                    ini_write_real("NormalLevels", string(room - oGame.rmOffset), 1);
                ini_close();
                
                global.IsCoinCollected = false;
                
            } else {
                // Hack for now (loop to splash)
                with (oFxRoomGoTo)
                    instance_destroy();
                    
                // Save game
                //ini_open("DontModifyThis.ini");
                //ini_write_real("NormalLevels", string(room - oGame.rmOffset), 1);
                //ini_close();
                    
                with (instance_create(0, 0, oFxRoomGoTo))  
                    target = rmCredits;  
            }
        }
    }
}

// Procedural Animation
var f, hh, oo, hoo, hhoo, detInv, detX, detV;

f      = 1.0 + (2.0 * h * zeta * omega);
hh     = h * h;
oo     = omega * omega;
hoo    = h * oo;
hhoo   = h * hoo;
detInv = 1.0 / (f + hhoo);
detX   = (f * val) + (h * vel) + (hhoo * target);
detV   = vel + (hoo * (target - val));
val    = detX * detInv;
vel    = detV * detInv;

// Change color
c += random_range(2, 8);

if (c &gt; 255)
    c = 0;
    
color  = make_color_hsv(c, 255, 255);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lock door

if (instance_exists(oParEnemy)) {
    init   = false;
    locked = true;
} else {
    if (!init) {
        val    = 0.5;
        locked = false;
        
        init = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var c1, c2, c3, c4;

c1 = color;

if (c + (255 * 0.25) &gt; 255)
    c2 = make_color_hsv(c + (255 * 0.25) - 255, 255, 255);
else
    c2 = make_color_hsv(c + (255 * 0.25), 255, 255);

if (c + (255 * 0.5) &gt; 255)
    c3 = make_color_hsv(c + (255 * 0.5) - 255, 255, 255);
else
    c3 = make_color_hsv(c + (255 * 0.5), 255, 255);
    
if (c + (255 * 0.75) &gt; 255)
    c4 = make_color_hsv(c + (255 * 0.75) - 255, 255, 255);
else
    c4 = make_color_hsv(c + (255 * 0.75), 255, 255);
    
// Draw door outline
if (!locked)    
    draw_rectangle_colour(x - (16 * (image_xscale - val) * 0.5), y - (20 * (image_yscale + val)), x - 1 + (16 * (image_xscale - val) * 0.5), y - 1, c1, c4, c3, c2, false);
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale - val, image_yscale + val, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
