<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBoss1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf = surface_create(sprite_width * 2, sprite_height * 2);

// Clear surface
surface_set_target(surf);
draw_clear_alpha(0, 0);
surface_reset_target();

init = false;

c     = random(255);
color = make_color_hsv(c, 255, 255);

// Spring Vars
val    = 0;
vel    = 0;
target = 0;
zeta   = 0.0001;   //0.15
omega  = 2 * pi; //8
h      = 0.04;   //0.02

// Movement
val2    = 0.5;
vel2    = 0;
target2 = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State

cx = 0;
cy = 0;
vx = 0;
vy = 0;

INIT    = 10;
DASHING = 11;
HURT    = 12;

state     = INIT;
stateInit = false;

hp         = 4;
canGetHurt = true;
toggle     = true;
delay      = false;

dashSpd    = 12.0;

xscale = 0.5;
yscale = 1.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; 32; i++)
    instance_create(x, y - 8, oPaintBullet);
    
//audio_play_sound(sfxDeath, 0, 0);

if (surface_exists(surf))
    surface_free(surf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stateInit = false;
state = DASHING;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delay

delay  = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == LANDED &amp;&amp; instance_exists(oPlayer)) {
    state     = HOVER;
    stateInit = false;
    
    val       = 1;
    y        -= 8 * 20;
    
    x         = oPlayer.x;
    val2      = oPlayer.x;
    target2   = oPlayer.x;
    
    alarm[1]  = random_range(50, 150);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state     = FALLING;
stateInit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state     = FALL_PREP;
stateInit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canGetHurt = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cx += vx;
cy += vy;
vxNew = round(cx);
vyNew = round(cy);
cx -= vxNew;
cy -= vyNew;

jumped = false;
landed = false;

repeat(abs(vyNew)) {
    if (!place_meeting(x, y + sign(vy), oParSolid))
        y += sign(vy);
    else {
        for (var i = 0; i &lt; 8; i++)
            instance_create(x + random_range(-8, 8), bbox_bottom, oPaint);   
                      
        vy = 0;
        break;
    }
}

repeat(abs(vxNew)) {
    if (!place_meeting(x + sign(vx), y, oParSolid))
        x += sign(vx);
    else {
        vx = 0;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

if (vx &gt; 0)
    target = -8;
else if (vx &lt; 0)
    target = 8;
else 
   target = 0;
    
xscale = Approach(xscale, 1, 0.08);
yscale = Approach(yscale, 1, 0.08);
    
var f, hh, oo, hoo, hhoo, detInv, detX, detV;

f      = 1.0 + (2.0 * h * zeta * omega);
hh     = h * h;
oo     = omega * omega;
hoo    = h * oo;
hhoo   = h * hoo;
detInv = 1.0 / (f + hhoo);
detX   = (f * val) + (h * vel) + (hhoo * target);
detV   = vel + (hoo * (target - val));
val    = detX * detInv;
vel    = detV * detInv;

detX   = (f * val2) + (h * vel2) + (hhoo * target2);
detV   = vel2 + (hoo * (target2 - val2));
val2   = detX * detInv;
vel2   = detV * detInv;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Change color
c += random_range(2, 8);

//if (vx != 0)
//    omega = 6 * pi;
//else
    omega = 3 * pi;

switch (state) {
    case INIT:
        // Gravity
        vy  = Approach(vy, 16, 0.5);
        // Stretch
        
        // Hit ground
        if (OnGround()) {
            xscale = 1.5;
            yscale = 0.5;         

            state      = DASHING;
            stateInit = false;
        }
    break;
    
    case DASHING:
        if (!stateInit) {
            if (instance_exists(oPlayer)) {
                if (oPlayer.x &gt; x)
                    dashDir =  1;
                else
                    dashDir = -1;
                    
                endx = oPlayer.x;  
            } else {
                // If player is dead during dash prep
                dashDir = choose(-1, 1);
                endx    = x + dashDir * 60;
            }
                    
            stateInit = true;
        } else {
            if (dashDir &gt; 0 &amp;&amp; x &lt; endx) || (dashDir &lt; 0 &amp;&amp; x &gt; endx)
                vx = Approach(vx, dashSpd * dashDir, 1.0);
            else {
                // Reset dash
                stateInit = false;
            }           
        }
        
        if (dashDir == 1 &amp;&amp; vx &lt;= 0)
            if (random(100) &gt; 70)
                with (instance_create(bbox_left - vx, bbox_bottom - 4, oPaintBullet)) {
                    direction = random_range(90 + 30, 90 + 60);
                    speed = random_range(4, 6);
                }
                
        if (dashDir == -1 &amp;&amp; vx &gt;= 0)
            if (random(100) &gt; 70)
                with (instance_create(bbox_right + vx, bbox_bottom - 4, oPaintBullet)) {
                    direction = random_range(90 - 30, 90 - 60);
                    speed = random_range(4, 6);
                }
        
        // Haha
        instance_create(x, bbox_bottom, oPaint);
        instance_create(x, bbox_bottom, oPaint);
        instance_create(x, bbox_bottom, oPaint);
        instance_create(x, bbox_bottom, oPaint);
    break;
    
    case HURT:
        if (!OnGround())
            vy  = Approach(vy, 16, 0.5);
        
        if (!OnGround())
            vx  = Approach(vx, 0, 0.05);      
        else
            vx  = Approach(vx, 0, 0.5);   
            
        if (!stateInit) {
            // Debris
            if (!instance_exists(oMissileSpawner)) {
                for (var i = 0; i &lt; random_range(3, 5); i++)
                    instance_create(random_range(4 * 20, 640 - (4 * 20)), 20, oDebris);
            } else {
                for (var i = 0; i &lt; random_range(1, 3); i++)
                    instance_create(random_range(4 * 20, 640 - (4 * 20)), 20, oDebris);
            }
        
            alarm[5] = 60;
            stateInit = true;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oSpikeR">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != HURT) {

audio_play_sound(sfxB1_Crash, 0, 0);

for (var i = 0; i &lt; 32; i++)
    instance_create(x, bbox_top, oPaintBullet);
    
with (oGame) {
    shake = true;
    alarm[0] = 12;
}

instance_create(x, y, oShockwave);

state = HURT;
stateInit = false;

vx = -random_range(4, 6);
vy = -random_range(4, 6);

xscale = 0.5;
yscale = 1.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oSpikeL">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != HURT) {

audio_play_sound(sfxB1_Crash, 0, 0);

for (var i = 0; i &lt; 32; i++)
    instance_create(x, bbox_top, oPaintBullet);
    
with (oGame) {
    shake = true;
    alarm[0] = 12;
}

instance_create(x, y, oShockwave);

state = HURT;
stateInit = false;

vx = random_range(4, 6);
vy = -random_range(4, 6);

xscale = 0.5;
yscale = 1.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((other.y &lt; y) &amp;&amp; (other.bbox_right &gt; bbox_left || other.bbox_left &lt; bbox_right) &amp;&amp; !other.onGround) {
    // Bounce player
    other.vy = -other.jumpHeight;
    
    with (oGame) {
        shake    = true;
        alarm[0] = 8;
    }
    
    if (canGetHurt &amp;&amp; state == HURT) {
        hp--;
        canGetHurt = false;
        alarm[0]   = 30;
        alarm[5]   = 30;
        
        audio_play_sound(sfxBossKill, 0, 0);
        
        // Hurt effect
        {
            val = -0.8;
    
            for (var i = 0; i &lt; 8; i++)
                instance_create(x, bbox_bottom, oPaint);  
            for (var i = 0; i &lt; 32; i++)
                instance_create(x, bbox_top, oPaintBullet); 
        }    
    }
    
    if (hp &lt;= 0) {
        instance_create(oPlayer.x, oPlayer.y - 16, oUpgradeTouchPaint);
        
        with (oDebris)
            instance_destroy();
        with (oMissile)
            instance_destroy();
        with (oMissileSpawner)
            instance_destroy();
            
        instance_destroy();
    }
    
    //state     = HOVER;
    //stateInit = false;
    
    xscale = 1.5;
    yscale = 0.5;
    
    //alarm[1]  = random_range(50, 150);
    
    // Cancel other alarm
    //alarm[3]  = -1;
    
} else {
    with (other)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>toggle = !toggle;

if (!init) {
    surface_set_target(surf);
    draw_clear_alpha(0, 0);
    surface_reset_target();
        
    init = true;
}

if (toggle || canGetHurt) {
    if (surface_exists(surf)) {
        surface_set_target(surf);
        draw_clear_alpha(0, 0);
        
        //draw_sprite_ext(sprite_index, image_index, 32, 48, image_xscale - (val), image_yscale + (val), 0, c_white, 1 - (!canGetHurt * 0.33));
        draw_sprite_pos(sprite_index, image_index, 32 - (sprite_width - val) * xscale * 0.5, 48 - (sprite_height + (val*0.5)) * yscale, 32 + (sprite_width + val) * xscale * 0.5, 48 - (sprite_height - (val*0.5)) * yscale, 32 + sprite_width * xscale * 0.5, 48, 32 - sprite_width * xscale * 0.5, 48, 1 - (!canGetHurt * 0.33));
        
        draw_set_blend_mode_ext(7, 6);
    
        var c1, c2, c3, c4;
        
        c1 = color;
        
        if (c + (255 * 0.25) &gt; 255)
            c2 = make_color_hsv(c + (255 * 0.25) - 255, 255, 255);
        else
            c2 = make_color_hsv(c + (255 * 0.25), 255, 255);
        
        if (c + (255 * 0.5) &gt; 255)
            c3 = make_color_hsv(c + (255 * 0.5) - 255, 255, 255);
        else
            c3 = make_color_hsv(c + (255 * 0.5), 255, 255);
            
        if (c + (255 * 0.75) &gt; 255)
            c4 = make_color_hsv(c + (255 * 0.75) - 255, 255, 255);
        else
            c4 = make_color_hsv(c + (255 * 0.75), 255, 255);
          
        draw_set_alpha(1 - (!canGetHurt * 0.33));      
        draw_rectangle_colour(0, 0, 64, 48, c1, c4, c3, c2, false);
        
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
                
        draw_surface(surf, x - 32, y - 48);
            
    } else {
        surf = surface_create(sprite_width * 2, sprite_height * 2);
        
        surface_set_target(surf);
        draw_clear_alpha(0, 0);
        draw_sprite_ext(sprite_index, image_index, 32, 48, image_xscale - (val), image_yscale + (val), 0, c_white, 1 - (!canGetHurt * 0.33));
        
        draw_set_blend_mode_ext(7, 6);
    
        var c1, c2, c3, c4;
        
        c1 = color;
        
        if (c + (255 * 0.25) &gt; 255)
            c2 = make_color_hsv(c + (255 * 0.25) - 255, 255, 255);
        else
            c2 = make_color_hsv(c + (255 * 0.25), 255, 255);
        
        if (c + (255 * 0.5) &gt; 255)
            c3 = make_color_hsv(c + (255 * 0.5) - 255, 255, 255);
        else
            c3 = make_color_hsv(c + (255 * 0.5), 255, 255);
            
        if (c + (255 * 0.75) &gt; 255)
            c4 = make_color_hsv(c + (255 * 0.75) - 255, 255, 255);
        else
            c4 = make_color_hsv(c + (255 * 0.75), 255, 255);
         
        draw_set_alpha(1 - (!canGetHurt * 0.33));   
        draw_rectangle_colour(0, 0, 64, 48, c1, c4, c3, c2, false);
        
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
                
        draw_surface(surf, x - 32, y - 48);
    }
}

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
