<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sLevelsNew</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParText</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

surf = surface_create(sprite_width, sprite_height);

// Clear surface
surface_set_target(surf);
draw_clear_alpha(0, 0);
// Draw sprite
draw_sprite(sprite_index, -1, 0, 0);
surface_reset_target();

//num = 4;

init     = false;
//count    = num;

// Buffer for surface(s)
buf = -1;

initdraw = false;

// Spring Vars
if (instance_exists(oGame))
    val = oGame.lvlcurr * 120;
else
    val = 0;
vel     = 0;
target  = val;
zeta    = 0.15;
omega   = 12 * pi;
h       = 0.02;

leftPrev  = false;
rightPrev = false;
leftHeld  = false;
rightHeld = false;

numCoinsCollected = 0;

global.LevelSelectPanelSFXFlag = 0;

canFastMove = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("DontModifyThis.ini");

for (var i = 0; i &lt; 10; i++) {
    coin[i] = ini_read_real("NormalLevels", string(i), false) == 2;
}

ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.LevelSelectPanelSFXFlag++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var kLeft   = keyboard_check(ord('A'))            || gamepad_axis_value(0, gp_axislh) &lt; -0.70  || gamepad_button_check(0, gp_padl) || keyboard_check(vk_left);
var kRight  = keyboard_check(ord('D'))            || gamepad_axis_value(0, gp_axislh) &gt;  0.70  || gamepad_button_check(0, gp_padr) || keyboard_check(vk_right);

var kRightFast = gamepad_button_check(0, gp_shoulderr) || keyboard_check(vk_pagedown); 
var kLeftFast  = gamepad_button_check(0, gp_shoulderl) || keyboard_check(vk_pageup);

var kFirst = gamepad_button_check(0, gp_shoulderlb) || keyboard_check(vk_home);
var kLast  = gamepad_button_check(0, gp_shoulderrb) || keyboard_check(vk_end);

if (oLevelSelect.canMove)
{
    // Fast move
    if (kLeftFast &amp;&amp; canFastMove)
    {
        target -= 120 * 10;
        canFastMove = false;
    }
        
    if (kRightFast &amp;&amp; canFastMove)
    {
        target += 120 * 10;
        canFastMove = false;
    }
        
    if (!kLeftFast &amp;&amp; !kRightFast)
        canFastMove = true;
    
    // Instant move to first/last level
    if (kFirst)
        target = 0;
    if (kLast)
        target = oGame.maxLevel * 120;
        
    // Clamp position
    target = clamp(target, 0, 120 * oGame.maxLevel);
    
    if (1/*oLevelSelect.init &amp;&amp; !instance_exists(oPaint) &amp;&amp; !instance_exists(oPaintBullet)*/) {
        // Move cursor
        if (kLeft &amp;&amp; !leftPrev &amp;&amp; !kRight) {
            if (global.LevelSelectPanelSFXFlag)
            {
                audio_play_sound(sfxMove, 0, 0);
                global.LevelSelectPanelSFXFlag = 0;
            }
            
            if (instance_exists(oLevelSelect))
                oLevelSelect.cursorDir = -1;
            target -= 120;
        } else if (kRight &amp;&amp; !rightPrev &amp;&amp; !kLeft) {
            if (global.LevelSelectPanelSFXFlag)
            {
                audio_play_sound(sfxMove, 0, 0);
                global.LevelSelectPanelSFXFlag = 0;
            }
                    if (instance_exists(oLevelSelect))
            oLevelSelect.cursorDir = 1;
            target += 120;
        }
        
        // Key prev
        if (kLeft) {
            leftPrev = true;
            
            leftHeld += 1;
            rightHeld = 0;
            
            if (leftHeld &gt; 3) {
                if (global.LevelSelectPanelSFXFlag)
                {
                    audio_play_sound(sfxMove, 0, 0);
                    global.LevelSelectPanelSFXFlag = 0;
                }
                        if (instance_exists(oLevelSelect))
                oLevelSelect.cursorDir = -1;
                target -= 120;
                leftHeld = 0;
            }
        } else {
            leftPrev = false;
            leftHeld = 0;
        }
        
        if (kRight) {
            rightPrev = true;
            
            rightHeld += 1 + (kRightFast * 9);
            leftHeld = 0;
            
            if (rightHeld &gt; 3) {
                if (global.LevelSelectPanelSFXFlag)
                {
                    audio_play_sound(sfxMove, 0, 0);
                    global.LevelSelectPanelSFXFlag = 0;
                }
                        if (instance_exists(oLevelSelect))
                oLevelSelect.cursorDir = 1;
                target += 120;
                rightHeld = 0;
            }
        } else {
            rightPrev = false;
            rightHeld = 0;
        }
    }
}

// Tween    
var f, hh, oo, hoo, hhoo, detInv, detX, detV;

f      = 1.0 + (2.0 * h * zeta * omega);
hh     = h * h;
oo     = omega * omega;
hoo    = h * oo;
hhoo   = h * hoo;
detInv = 1.0 / (f + hhoo);
detX   = (f * val) + (h * vel) + (hhoo * target);
detV   = vel + (hoo * (target - val));
val    = detX * detInv;
vel    = detV * detInv;

// Middle of screen, minus offset (border), minus target level
x = (xstart/*320 - 80*/) -val;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();

draw_sprite(sprite_index, -1, x, y); 

for (var i = 0; i &lt; 10; i++) {
    if (coin[i])
        draw_sprite(sCoinMarker, -1, x + 70 + (i * 120), y + 32);
}

/*
// Initial clear
if (!initdraw) {
    surface_set_target(surf);
    draw_clear_alpha(0, 0);
    draw_sprite(sprite_index, -1, 0, 0);    
    surface_reset_target();
    
    initdraw = true;
}

// Surface drawing
if (surface_exists(surf)) {
    draw_surface(surf, x, y);
} else {
    if (buf != -1) {
        surf = surface_create(sprite_width, sprite_height);
        
        surface_set_target(surf);
        draw_clear_alpha(0, 0);  
        surface_reset_target();        
        
        // Copy buffer to surface
        buffer_set_surface(buf, surf, 0, 0, 0);
        
        draw_surface(surf, x, y);        
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
