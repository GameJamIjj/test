<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>oPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

// Inherit oParEntity variables
event_inherited();

facing = 1;

if (!instance_exists(oCamera))
    instance_create(x, y, oCamera);

view_xview[0] = max(0, min(x - view_wport[0] * 0.5, room_width - view_wport[0]));
view_yview[0] = max(0, min(y - view_hport[0] * 0.5 - 24, room_height - view_hport[0]));

// Movement ///////////////////////////////////////////////////////////////////

var oldFPS, newFPS;

oldFPS = 30;
newFPS = 30;

m      = newFPS / oldFPS;

groundAccel = 1.00 / (sqr(newFPS / oldFPS)); // 1.00
groundFric  = 2.00 / (sqr(newFPS / oldFPS)); // 2.00
airAccel    = 1.00 / (sqr(newFPS / oldFPS)); // 1.00
airFric     = 0.01 / (sqr(newFPS / oldFPS)); // 0.01
vxMax       = 7.00 * m; // 6.50
vyMax       = 18.0 * m; // 16.0
jumpHeight  = 8.00 * m; // 8.00
gravNorm    = 0.70 / (sqr(newFPS / oldFPS)); // 0.80
gravSlide   = 0.30 / (sqr(newFPS / oldFPS)); // 0.30

clingTime   = 4.0 * (1 / m);

// Misc ///////////////////////////////////////////////////////////////////////

// States
IDLE      = 10;
RUN       = 11;
JUMP      = 12;

// Initialize properties
state  = IDLE;
facing = image_xscale; // Change xscale in editor to adjust initial facing

// For squash + stretch
xscale = 1;
yscale = 1;

///////////////////////////////////////////////////////////////////////////////

// Legacy code, haha
sticking = false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Misc Declarations

canDblJump = true;
blink      = true;
bounced    = false;
freeze     = false;

// Spring Vars
val    = 0;
vel    = 0;
target = 0;
zeta   = 0.0001;   //0.15
omega  = 2 * pi; //8
h      = 0.04;   //0.02
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (oGame) {
    shake   = true;
    alarm[0] = 8;
}

for (var i = 0; i &lt; 32; i++)
    instance_create(x, y - 8, oPaintBullet);

with (instance_create(0, 0, oSpawnPlayer)) {
    xx = other.xstart;
    yy = other.ystart;
}

audio_play_sound(sfxDeath, 0, 0); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sticking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entity Step 2.0

if (!freeze) {
    cx += vx;
    cy += vy;
    vxNew = round(cx);
    vyNew = round(cy);
    cx -= vxNew;
    cy -= vyNew;
    
    
    jumped = false;
    landed = false;

    repeat(abs(vyNew)) {
        if (!PlatformCheck())
            y += sign(vy);
        else {
            vy = 0;
            break;
        }
    }
    
    if (platformTarget) {
        if (!onGround)
            landed = true;
        
        if (landed)
            with (platformTarget) other.vy = 0;
        else
            with (platformTarget) other.vy = 0;
    }
    
    repeat(abs(vxNew)) {
        if (!place_meeting(x + sign(vx), y, oParSolid))
            x += sign(vx);
        else {
            vx = 0;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Death

if (place_meeting(x, y, oParSolid) || place_meeting(x, y, oParHazard))
    instance_destroy();

if (bbox_right &lt; 0 || bbox_left &gt; room_width || bbox_top &gt; room_height || bbox_bottom &lt; 0)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

if (vx &gt; 0)
    target = -4;
else if (vx &lt; 0)
    target = 4;
else 
    target = 0;

xscale = Approach(xscale, 1, 0.08);
yscale = Approach(yscale, 1, 0.08);

var f, hh, oo, hoo, hhoo, detInv, detX, detV;

f      = 1.0 + (2.0 * h * zeta * omega);
hh     = h * h;
oo     = omega * omega;
hoo    = h * oo;
hhoo   = h * hoo;
detInv = 1.0 / (f + hhoo);
detX   = (f * val) + (h * vel) + (hhoo * target);
detV   = vel + (hoo * (target - val));
val    = detX * detInv;
vel    = detV * detInv;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var onGroundPrev = onGround;

event_inherited();

if (onGround &amp;&amp; !onGroundPrev) { 
    xscale = 1.5;
    yscale = 0.5;
    canDblJump = true;
    
    for (var i = 0; i &lt; 16; i++)
        instance_create(x, y, oPaint);
        
    audio_play_sound(sfxLand, 0, 0); 
}

if (cLeft || cRight) {
    // Reset 
    canDblJump = true;
    blink       = true;
}

// Paint
if ((vx != 0 || vy != 0) &amp;&amp; place_meeting(x, y - 1, oBlock))
    for (var i = 0; i &lt; 8; i++)
        instance_create(x, bbox_top, oPaint);   
        
if ((vx != 0 || vy != 0) &amp;&amp; place_meeting(x, y + 1, oBlock))
    for (var i = 0; i &lt; 8; i++)
        instance_create(x, bbox_bottom, oPaint);  
        
if ((vx != 0 || vy != 0) &amp;&amp; place_meeting(x + 1, y, oBlock))
    for (var i = 0; i &lt; 8; i++)
        instance_create(bbox_right, y - 8, oPaint); 
        
if ((vx != 0 || vy != 0) &amp;&amp; place_meeting(x - 1, y, oBlock))
    for (var i = 0; i &lt; 8; i++)
        instance_create(bbox_left, y - 8, oPaint); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Input //////////////////////////////////////////////////////////////////////

var kLeft, kRight, kUp, kDown, kJump, kJumpRelease, kSlide;

kLeft        = keyboard_check(vk_left)           || gamepad_axis_value(0, gp_axislh) &lt; -0.40;
kRight       = keyboard_check(vk_right)          || gamepad_axis_value(0, gp_axislh) &gt;  0.40;
kUp          = keyboard_check(vk_up)             || gamepad_axis_value(0, gp_axislv) &lt; -0.40;
kDown        = keyboard_check(vk_down)           || gamepad_axis_value(0, gp_axislv) &gt;  0.40;

kJump        = keyboard_check_pressed(ord('A'))  || gamepad_button_check_pressed(0, gp_face1);
kJumpRelease = keyboard_check_released(ord('A')) || gamepad_button_check_released(0, gp_face1);

kAction      = keyboard_check_pressed(ord('S'))   || gamepad_button_check_pressed(0, gp_face3);

// Movement ///////////////////////////////////////////////////////////////////

if (kRight || kLeft)
    omega = 6 * pi;
else
    omega = 3 * pi;

// Apply the correct form of acceleration and friction
var tempAccel, tempFric;

if (onGround) {  
    tempAccel = groundAccel;
    tempFric  = groundFric;
} else {
    tempAccel = airAccel;
    tempFric  = airFric;
}

// Wall cling to avoid accidental push-off
if ((!cRight &amp;&amp; !cLeft) || onGround) {
    canStick = true;
    sticking = false;
} else if (((kRight &amp;&amp; cLeft) || (kLeft &amp;&amp; cRight)) &amp;&amp; canStick &amp;&amp; !onGround) {
    alarm[0] = clingTime;
    sticking = true; 
    canStick = false;       
}

// Handle gravity
//if (!onGround) {
    if ((cLeft || cRight) &amp;&amp; vy &gt;= 0) {
        // Wall slide
        vy = Approach(vy, vyMax * 0.33, gravSlide);
    } else {
        // Fall normally
        vy = Approach(vy, vyMax, gravNorm);
    }
//}

// Left 
if (kLeft &amp;&amp; !kRight &amp;&amp; !sticking) {
    facing = -1;
    state  = RUN;
    
    // Apply acceleration left
    if (vx &gt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, -vxMax, tempAccel);
// Right
} else if (kRight &amp;&amp; !kLeft &amp;&amp; !sticking) {
    facing = 1;
    state  = RUN;
    
    // Apply acceleration right
    if (vx &lt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, vxMax, tempAccel);
}

// Friction
if (!kRight &amp;&amp; !kLeft) {
    vx    = Approach(vx, 0, tempFric);
    state = IDLE;
} 
 
// Wall jump
if (kJump &amp;&amp; cLeft &amp;&amp; !onGround) {   
    xscale = 0.5;
    yscale = 1.5;
      
    audio_play_sound(sfxJump2, 0, 0);    
               
    // Wall jump is different when pushing off/towards the wall        
    if (kLeft) {
        vx = jumpHeight * .75;
        vy = -jumpHeight * 1.1;
    } else {
        vx = vxMax;    
        vy = -jumpHeight * 1.1;
    }  
} else if (kJump &amp;&amp; cRight &amp;&amp; !onGround) {   
    xscale = 0.5;
    yscale = 1.5;
       
    audio_play_sound(sfxJump2, 0, 0); 
                            
    // Wall jump is different when pushing off/towards the wall  
    if (kRight) {
        vx = -jumpHeight * .75;
        vy = -jumpHeight * 1.1;
    } else {
        vx = -vxMax;    
        vy = -jumpHeight * 1.1;
    }  
}

// Jump
if (kJump) { 
    if (onGround) {
        // Fall thru platform
        if (kDown) &amp;&amp; (place_meeting(x, y + 1, oParJumpThru) &amp;&amp; !place_meeting(x, y + 1, oParSolid)) {
                ++y;
        // Normal jump
        } else {
            xscale = 0.5;
            yscale = 1.5;
            
            vy = -jumpHeight;
            
            audio_play_sound(sfxJump, 0, 0);
        }
    } else {
        /*
        if (canDblJump &amp;&amp; !cRight &amp;&amp; !cLeft &amp;&amp; !kDown) {
            xscale = 0.5;
            yscale = 1.5;
            
            vy = -jumpHeight;
                  
            // Double jump paint spread
            for (var i = 0; i &lt; 24; i++)
                instance_create(x, y - 8, oPaintBullet);
                     
            canDblJump = false;
            
            audio_play_sound(sfxJump2, 0, 0);
        }
        */
    }
// Variable jumping
} else if (kJumpRelease) { 
    if (vy &lt; 0)
        vy *= 0.25;
}

// Jump state
if (!onGround) {
    state = JUMP;
    
    if (cLeft)
        facing = 1;
    if (cRight)
        facing = -1;
}

if (kAction &amp;&amp; distance_to_object(oBall) &lt; 24) {
    var flag = false;
    
    // Up
    if (kUp &amp;&amp; !kDown &amp;&amp; !kRight &amp;&amp; !kLeft) {
        with(oBall) {
            vx =  0;
            vy = -vxMax; 
            
            val = 0.5       
        }
        
        with (oGame) {
            shake   = true;
            alarm[0] = 8;
        }
        
        flag = true;
    }
    
    // Up Right
    if (!flag &amp;&amp; kUp &amp;&amp; !kDown &amp;&amp; kRight &amp;&amp; !kLeft) {
        with(oBall) {
            vx =  vxMax / sqrt(2);
            vy = -vxMax / sqrt(2);
            
            val = 0.5;        
        }
        
        with (oGame) {
            shake   = true;
            alarm[0] = 8;
        }
        
        flag = true;
    }
    
    // Up Left
    if (!flag &amp;&amp; kUp &amp;&amp; !kDown &amp;&amp; !kRight &amp;&amp; kLeft) {
        with(oBall) {
            vx = -vxMax / sqrt(2);
            vy = -vxMax / sqrt(2);   
            
            val = 0.5;     
        }
        
        with (oGame) {
            shake   = true;
            alarm[0] = 8;
        }
        
        flag = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// CanDash status
if (canDblJump)
    image_alpha = 1;
else {
    if (blink)
        image_alpha = 1;
    else
        image_alpha = 0.5;
        
    blink = !blink;
}

// Draw player
draw_sprite_pos(sprite_index, image_index, x - (sprite_width - val) * xscale * 0.5, y - (sprite_height + (val*0.5)) * yscale, x + (sprite_width + val) * xscale * 0.5, y - (sprite_height - (val*0.5)) * yscale, x + sprite_width * xscale * 0.5, y, x - sprite_width * xscale * 0.5, y, image_alpha);
//draw_sprite_ext(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
